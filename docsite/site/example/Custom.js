"use strict";

var React = require("react");
var Form = require("enquiry/form");
var Fieldset = require("enquiry/fieldset");
var _ = require("lodash");

/**
 * We require a small validation lib here -
 * form validations are just plain functions where the first argument is the
 * actual value, and the second argument contains all the values from our form.
 */
var Validate = require("./lib/validate");


class Input extends React.Component {
    generateId = () => {
        return "id-" + this.props.name;
    };

    renderLabel = () => {
        if (this.props.label)
            return <label htmlFor={this.generateId()}>{this.props.label}</label>;
    };

    getError = () => {
        if (this.props.errors)
            return this.props.errors[this.props.name];
    };

    renderFormError = () => {
        if (this.getError())
            return <small className="text-color-danger">{this.getError()}</small>;
    };

    validationFactory = () => {
        var validation = [];

        if (this.props.required)
            validation.push(Validate.isRequired);

        if (this.props.type == "email")
            validation.push(Validate.validateEmail);

        return validation;
    };

    render() {
        /**
         * Omit invalid html attributes and the required flag...
         */
        var passProps = _.omit(this.props, "required", "label");

        /**
         * CAVEAT: the ref is required to allow enquiry to deep-inspect
         * the children of this component.
         * 
         * The name of the ref is irrelevant, but cannot be generated by the 
         * component itself: react needs to know the ref in the parent before
         * the render call is actually made :(
         */
        return (
            <Fieldset ref="_some_ref_to_my_component">
                {this.renderLabel()}
                <input validation={this.validationFactory()} id={this.generateId()} {...passProps} />
                {this.renderFormError()}
            </Fieldset>
            );
    }
}

class CustomForm extends React.Component {
    static displayName = "Form/With/Custom/Elements";

    state = {
        errors: {}
    };

    /**
     * Standard submit handler. 
     * 
     * The form is always validated on submit.
     * 
     * @argument Object errors - Form erors, if any, or undefined
     * @argument Object values - All form values as a key-value object
     * @argument Reform form   - The actual form component for advanced use
     */
    onSubmit = (errors, values, form) => {
        /**
         * If any errors present, store them and bail out.
         */
        if (errors)
            return this.setState({
                errors: errors
            });

    /**
     * Form is now validated, so better store values somewhere!
     */
    };

    render() {
        /**
         * Wrap normal input tags in a enqury/form component.
         * 
         * The form will go trough each of the children wraps them in a 
         * decorator that'll take care of the state.
         * 
         * Each input rendered in this form will be a react "controlled input".
         */
        return (
            <Form onSubmit={this.onSubmit}>
                <Input errors={this.state.errors} required={true} type="email" name="email" label="Your e-mail address" />
                <Input errors={this.state.errors} required={true} name="name" label="Your name" />
                <Input errors={this.state.errors} required={true} name="profession" label="Your profession..." />
                <button className="solid">Save...</button>
            </Form>
            );
    }
}

module.exports = CustomForm;