module.exports = {
    "basic": {
        "source": "\"use strict\";\n\nvar Form = require(\"enquiry/form\");\nvar React = require(\"react\");\n\n/**\n * We require a small validation lib here -\n * form validations are just plain functions where the first argument is the\n * actual value, and the second argument contains all the values from our form.\n */\nvar Validate = require(\"./lib/validate\");\n\n\nvar SignupForm = React.createClass({\n    displayName: \"Signup\",\n    \n    getInitialState: function(){\n        return { errors: {} };\n    },\n    \n    /**\n     * Standard submit handler. \n     * \n     * The form is always validated on submit.\n     * \n     * @argument Object errors - Form erors, if any, or undefined\n     * @argument Object values - All form values as a key-value object\n     * @argument Reform form   - The actual form component for advanced use\n     */\n    onSubmit: function(errors, values, form){\n        /**\n         * If any errors present, store them and bail out.\n         */\n        if(errors) \n            return this.setState({ errors: errors });\n            \n        /**\n         * Form is now validated, so better store values somewhere!\n         */\n    },\n    \n    render: function(){\n        /**\n         * Wrap normal input tags in a enqury/form component.\n         * \n         * The form will go trough each of the children wraps them in a \n         * decorator that'll take care of the state.\n         * \n         * Each input rendered in this form will be a react \"controlled input\".\n         */\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <div>\n                    <label>E-mail</label>\n                    <input type=\"email\" validation={[Validate.isRequired, Validate.validateEmail]} name=\"email\" placeholder=\"you@example.com\" />\n                    <small className=\"text-color-danger\">{this.state.errors.email}</small>\n                </div>\n                <div>\n                    <label>Password</label>\n                    <input type=\"password\" validation={[Validate.isRequired, Validate.validatePassword]} name=\"password\" placeholder=\"********\" />\n                    <small className=\"text-color-danger\">{this.state.errors.password}</small>\n                </div>\n                <div>\n                    <label>Confirm password</label>\n                    <input type=\"password\" validation={[Validate.isRequired, Validate.validateEqual(\"password\")]} name=\"confirm\" placeholder=\"********\" />\n                    <small className=\"text-color-danger\">{this.state.errors.password}</small>\n                </div>\n                <br/>\n                <button className=\"solid fat important\" type=\"submit\">Create account</button>\n            </Form>\n        );\n    }\n});\n\nmodule.exports = SignupForm;",
        "name": "basic",
        "title": "Basic form example with validation",
        "component": "./example/Basic.jsx"
    },
    "custom": {
        "source": "\"use strict\";\n\nvar React = require(\"react\");\nvar Form = require(\"enquiry/form\");\nvar Fieldset = require(\"enquiry/fieldset\");\nvar _ = require(\"lodash\");\n\n/**\n * We require a small validation lib here -\n * form validations are just plain functions where the first argument is the\n * actual value, and the second argument contains all the values from our form.\n */\nvar Validate = require(\"./lib/validate\");\n\n\nvar Input = React.createClass({\n\n    generateId: function(){\n        return \"id-\" + this.props.name;\n    },\n    \n    renderLabel: function(){\n        if(this.props.label)\n            return <label htmlFor={this.generateId()}>{this.props.label}</label>;\n    },\n    \n    getError: function(){\n        if(this.props.errors)\n            return this.props.errors[this.props.name];\n    },\n    \n    renderFormError: function(){\n        if(this.getError())\n            return <small className=\"text-color-danger\">{this.getError()}</small>;\n    },\n    \n    validationFactory: function(){\n        var validation = [];\n        \n        if (this.props.required)\n            validation.push(Validate.isRequired);\n            \n        if (this.props.type == \"email\")\n            validation.push(Validate.validateEmail);\n\n        return validation;\n    },\n\n    render: function(){\n        /**\n         * Omit invalid html attributes and the required flag...\n         */\n        var passProps = _.omit(this.props, \"required\", \"label\");\n\n        /**\n         * CAVEAT: the ref is required to allow enquiry to deep-inspect\n         * the children of this component.\n         * \n         * The name of the ref is irrelevant, but cannot be generated by the \n         * component itself: react needs to know the ref in the parent before\n         * the render call is actually made :(\n         */\n        return (\n            <Fieldset ref=\"_some_ref_to_my_component\">\n                {this.renderLabel()}\n                <input validation={this.validationFactory()} id={this.generateId()} {...passProps} />\n                {this.renderFormError()}\n            </Fieldset>\n        );\n    }\n});\n\nvar CustomForm = React.createClass({\n    displayName: \"Form/With/Custom/Elements\",\n    \n    getInitialState: function(){\n        return { errors: {} };\n    },\n    \n    /**\n     * Standard submit handler. \n     * \n     * The form is always validated on submit.\n     * \n     * @argument Object errors - Form erors, if any, or undefined\n     * @argument Object values - All form values as a key-value object\n     * @argument Reform form   - The actual form component for advanced use\n     */\n    onSubmit: function(errors, values, form){\n        /**\n         * If any errors present, store them and bail out.\n         */\n        if(errors) \n            return this.setState({ errors: errors });\n            \n        /**\n         * Form is now validated, so better store values somewhere!\n         */\n    },\n    \n    render: function(){\n        /**\n         * Wrap normal input tags in a enqury/form component.\n         * \n         * The form will go trough each of the children wraps them in a \n         * decorator that'll take care of the state.\n         * \n         * Each input rendered in this form will be a react \"controlled input\".\n         */\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Input errors={this.state.errors} required={true} type=\"email\" name=\"email\" label=\"Your e-mail address\" />\n                <Input errors={this.state.errors} required={true} name=\"name\" label=\"Your name\" />\n                <Input errors={this.state.errors} required={true} name=\"profession\" label=\"Your profession...\" />\n                <button className=\"solid\">Save...</button>\n            </Form>\n        );\n    }\n});\n\nmodule.exports = CustomForm;",
        "name": "custom",
        "title": "Custom form elements",
        "component": "./example/Custom.jsx"
    },
    "sink": {
        "source": "var React = require(\"react\");\n\nvar Reform = require(\"enquiry/form\");\nvar Fieldset = require(\"enquiry/fieldset\");\nvar Validate = require(\"./lib/validate\");\nvar _ = require(\"lodash\");\n\n// var findField = require(\"./lib/util/find-field\");\n\nvar Input = React.createClass({\n\n    generateId: function(){\n        return \"id-\" + this.props.name;\n    },\n    \n    renderLabel: function(){\n        if(this.props.label)\n            return <label htmlFor={this.generateId()}>{this.props.label}</label>;\n    },\n    \n    getError: function(){\n        console.log(this.props.errors);\n        if(this.props.errors)\n            return this.props.errors[this.props.name];\n    },\n    \n    renderFormError: function(){\n        if(this.getError())\n            return <small className=\"text-color-danger\">{this.getError()}</small>;\n    },\n    \n    validationFactory: function(){\n        var validation = [];\n        \n        if (this.props.required)\n            validation.push(Validate.isRequired);\n\n        if (this.props.type == \"email\")\n            validation.push(Validate.validateEmail);\n        \n        return validation;\n    },\n\n    render: function(){\n        /**\n         * Omit invalid html attributes and the required flag...\n         */\n        var passProps = _.omit(this.props, \"required\", \"label\");\n        \n        console.log(this.validationFactory());\n\n       return (\n            <Fieldset ref=\"reform\">\n                {this.renderLabel()}\n                <input validation={Validate.isRequired} id={this.generateId()} {...passProps} />\n                {this.renderFormError()}\n            </Fieldset>\n        );\n        // return (\n        //     <Fieldset>\n        //         {this.renderLabel()}\n        //         <input validation={Validate.isRequired} id={this.generateId()} {...passProps} />\n        //         {this.renderFormError()}\n        //     </Fieldset>\n        // );\n    }\n});\n\nvar Deep = React.createClass({\n    onChange: function(evt){\n        console.log(this.refs);\n        // console.log(evt.target.value);\n        // console.log(findField(\"anything\", this.refs).getValue(), 'got value');\n        // var field = this.refs.reform.findField(\"anything\");\n        // console.log(field.getValue());\n    },\n    \n   render: function(){\n       return (\n            <Fieldset ref=\"reform\" type=\"fieldset\">\n                <input style={{border: \"1px solid green\"}} ref=\"foo\" onChange={this.onChange} name=\"anything\" type=\"number\" />\n            </Fieldset>\n        );\n   } \n});\n\nvar Prefs = React.createClass({\n    foo: function(){\n        \n    },\n    \n    render: function(){\n        return (\n            <Fieldset ref=\"reform\" type=\"fieldset\">\n                <label>\n                    <input type=\"checkbox\" name=\"thing\" value=\"1\" /> I want one\n                </label>\n                <label>\n                    <input type=\"checkbox\" name=\"thing\" value=\"2\" /> I want two\n                </label>\n                <label>\n                    <input type=\"checkbox\" name=\"thing\" value=\"3\" /> I want three\n                </label>\n                <Deep />\n            </Fieldset>\n        );\n    }\n});\n\nvar Things = React.createClass({\n    render: function(){\n        return (\n            <Fieldset ref=\"hookup\" type=\"fieldset\">\n                <select name=\"picone\">\n                    <option value=\"a\">Choose A</option>\n                    <option value=\"b\">Choose B</option>\n                    <option value=\"c\">Choose C</option>\n                    <option value=\"d\">Choose D</option>\n                    <option value=\"e\">Choose E</option>\n                </select>\n            </Fieldset>\n        );\n    }\n});\n\n\nvar TheSink = React.createClass({\n    \n    getInitialState: function(){\n        return {\n            foo: \"foo\",\n            what: \"this\",\n            thing: [2, 3],\n            picone: \"c\"\n        };\n    },\n    \n    onSubmit: function(errors, values, form){\n        this.setState({\n            style: { backgroundColor: \"green\" },\n            errorr: errors\n        });\n    },\n    \n    onChange: function(){\n        console.log(this.refs.fooform.isTentativelyValid());        \n    },\n\n    render: function(){\n        return (\n            <div>\n                <Reform style={this.state.style} ref=\"fooform\" defaultValues={this.state} onSubmit={this.onSubmit}>\n                    <Input errors={this.state.errors} onChange={this.onChange} type=\"text\" name=\"foo\" />\n                    <textarea defaultValue=\"You can set a default value here too!\" autoFocus={true} name=\"text\" rows={3} placeholder=\"Tell me...\" />\n                    <div>\n                        <input type=\"radio\" value=\"this\" name=\"what\" /> this\n                        <input type=\"radio\" value=\"that\" name=\"what\" /> that\n                    </div>\n                    <Prefs />\n                    <Things />\n                    <select name=\"allthings\" multiple={true}>\n                        <option value=\"1\">One</option>\n                        <option value=\"2\">Two</option>\n                        <option value=\"4\">Three</option>\n                    </select>\n                    <button>submit</button>\n                </Reform>\n            </div>\n        );\n    }\n});\n\nmodule.exports = TheSink;\n\n",
        "name": "sink",
        "title": "The kitchen sink example",
        "component": "./example/TheSink.jsx"
    }
}